[General]
network = csma_ca_fakewired.FakeWireCsmaCaNetwork
sim-time-limit = 60s

# INET 라이브러리 절대경로 (기존에 LD_LIBRARY_PATH 잡혀 있으면 생략 가능)
load-libs = /home/kimdawoon/study/workspace/research/inet/out/clang-release/src/INET

# 질문 방지
cmdenv-interactive = false

# --- NED path는 커맨드라인 -n 옵션으로 줄 예정이라 여기서는 생략 가능 ---
# ned-path = /home/kimdawoon/study/workspace/research/inet/src;./ned

# ---------------------- 공통 (모든 구성 공통) ----------------------
# 모든 호스트는 1개의 UDP 기본 앱을 가짐
*.host[*].numApps = 1
*.host[*].app[0].typename = "UdpBasicApp"
*.host[*].app[0].destAddresses = "host[0]"    # 모두 host[0]으로 보냄(수신기)
*.host[*].app[0].destPort = 5000
*.host[*].app[0].messageLength = 1000B
*.host[*].app[0].sendInterval = exponential(1s)   # 평균 1초

# host[0]은 UdpSink 하나 더 붙여서 받도록
*.host[0].numApps = 2
*.host[0].app[1].typename = "UdpSink"
*.host[0].app[1].localPort = 5000

# ----------------- "유선처럼" 보이게 하는 물리 계층 설정 -----------------
# 모든 노드 위치 동일(0,0) => 경로손실 차이 없음
*.host[*].mobility.typename = "StationaryMobility"
*.host[*].mobility.initialX = 0m
*.host[*].mobility.initialY = 0m
*.host[*].mobility.initialZ = 0m

# 배경 잡음 아주 낮게
*.radioMedium.backgroundNoise.power = -200dBm

# IEEE80211 무선 NIC 내부 파라미터 조정 (충돌 잘 나게/백오프 관찰 쉽게)
# RTS/CTS 끄기
**.wlan[0].mac.rtsThreshold = 999999B

# 백오프 파라미터(기본값도 괜찮지만 충돌 잘 보려면 조금 좁게)
**.wlan[0].mac.cwMin = 15      # 기본 31 -> 더 좁게 = 충돌 확률↑
**.wlan[0].mac.cwMax = 1023

# 전송 전력 크게, 수신 감도 낮춰서(=민감하게) → 손실/노이즈로 인한 실패 없애기
**.wlan[0].radio.transmitter.power = 100mW
**.wlan[0].radio.receiver.sensitivity = -120dBm

# 페이딩/도플러 등 꺼버리기 (Scalar 계열 쓰면 기본 off)
**.wlan[0].radio.analogModel.typename = "ScalarAnalogModel"
**.wlan[0].radio.pathLoss.typename = "FreeSpacePathLoss"
# 거리=0이라서 손실 거의 0

# ----------------- 통계(충돌/재시도) 기록 -----------------
# (1) 전부 벡터 기록: 일단 확인 용
**.vector-recording = true
# 필요 없다 싶으면 나중에 false로 돌리고 개별 이름만 true 남김

# (2) 꼭 보고 싶은 것만 다시 명시 (exists를 전제로)
#**.wlan[*].mac.contention.backoffPeriodGenerated:vector-recording = true
#**.wlan[*].mac.contention.channelAccessGranted:vector-recording = true
#**.wlan[*].mac.contention.stateChanged:vector-recording = true
#**.wlan[*].mac.recoveryProcedure.contentionWindowChanged:vector-recording = true
#**.wlan[*].mac.recoveryProcedure.retryLimitReached:scalar-recording = true

#**.wlan[*].mac.dcf.packetSentToPeerWithRetry:vector-recording = true
#**.wlan[*].mac.dcf.packetSentToPeerWithoutRetry:vector-recording = true
#**.wlan[*].mac.dcf.packetDropRetryLimitReached:scalar-recording = true

# EDCA를 쓰는 경우만(=Hcf/Edcaf)
# **.wlan[*].mac.hcf.edcafs[*].packetSentToPeerWithRetry:vector-recording = true
# **.wlan[*].mac.hcf.edcafs[*].edcaCollisionDetected:scalar-recording = true
# ----------------- 구성별 노드 수 -----------------
[Config Base]
**.numHosts = ${n=10}     # 기본 10명

[Config N20]
extends = Base
**.numHosts = 20

[Config N50]
extends = Base
**.numHosts = 50
