# [General] 섹션: 시뮬레이션 전역에 적용되는 기본 설정을 정의합니다.
[General]
# 실행할 네트워크를 지정합니다. csma_ca_fakewired 패키지 안에 있는 FakeWireCsmaCaNetwork를 사용합니다.
network = csma_ca_fakewired.FakeWireCsmaCaNetwork

# 시뮬레이션의 최대 지속 시간을 60초로 제한합니다.
sim-time-limit = 60s

# INET 프레임워크의 컴파일된 라이브러리 파일(.so) 경로를 지정합니다.
# 시뮬레이터가 INET의 C++ 모듈 코드를 찾기 위해 필요합니다.
load-libs = /home/kimdawoon/study/workspace/research/inet/out/clang-release/src/INET

# Command-line 환경(Cmdenv)에서 시뮬레이션 실행 중 사용자에게 파라미터 입력을 요구하지 않도록 설정합니다.
# 자동화된 배치 실행에 유용합니다.
cmdenv-interactive = false

# --- NED 파일 경로는 커맨드라인에서 '-n' 옵션으로 지정할 것이므로 여기서는 주석 처리합니다.
# ned-path = /home/kimdawoon/study/workspace/research/inet/src;./ned

# =================================================================================
# ---------------------- 공통 설정 (모든 시나리오에 적용) ----------------------
# =================================================================================

# --- 네트워크 자동 설정 (IP 주소 할당) --- 
*.configurator.config = xml("<config><interface hosts='**' address='10.0.0.x' netmask='255.255.255.0'/></config>")
*.configurator.addStaticRoutes = false # 이 네트워크는 단일 서브넷이므로 라우팅 불필요

# --- 애플리케이션 계층 설정 ---
# 모든 호스트(host[*])는 기본적으로 1개의 애플리케이션을 갖도록 설정합니다.
*.host[*].numApps = 1
# 그 첫 번째(app[0]) 애플리케이션의 타입을 'UdpBasicApp'으로 지정합니다. 이 앱은 UDP 패킷을 주기적으로 생성합니다.
*.host[*].app[0].typename = "UdpBasicApp"
# 생성된 패킷의 목적지 주소를 'host[0]'으로 고정합니다. 즉, 모든 노드가 host[0]에게만 데이터를 보냅니다.
*.host[*].app[0].destAddresses = "host[0]"
# 목적지 포트 번호를 5000으로 설정합니다.
*.host[*].app[0].destPort = 5000
# 전송할 메시지(패킷)의 크기를 1000바이트로 설정합니다.
*.host[*].app[0].messageLength = 1000B
# 메시지 전송 간격을 평균 1초인 지수분포(exponential)에 따르도록 설정합니다. 실제 트래픽과 유사한 패턴을 만듭니다.
*.host[*].app[0].sendInterval = exponential(1s)

# --- 수신자(host[0]) 특별 설정 ---
# host[0]은 패킷을 받기만 해야 하므로, 설정을 덮어씁니다. 총 2개의 앱을 가집니다.
*.host[0].numApps = 2
# 두 번째(app[1]) 앱으로 'UdpSink'를 지정합니다. UdpSink는 들어오는 패킷을 수신하여 폐기하는 역할을 합니다.
*.host[0].app[1].typename = "UdpSink"
# UdpSink가 5000번 포트에서 수신 대기하도록 설정하여, 다른 노드들이 보낸 패킷을 받게 합니다.
*.host[0].app[1].localPort = 5000

# =================================================================================
# ----------------- "유선처럼" 동작하게 만드는 물리 계층 설정 -----------------
# =================================================================================

# 모든 호스트의 이동성(mobility)을 'StationaryMobility'(고정)로 설정하고,
# 모든 호스트의 초기 위치를 동일한 좌표(0, 0, 0)로 설정합니다.
# 결과적으로 모든 노드 간의 거리가 0이 되어, 거리에 따른 신호 감쇠(path loss)가 발생하지 않습니다.
*.host[*].mobility.typename = "StationaryMobility"
*.host[*].mobility.initialX = 0m
*.host[*].mobility.initialY = 0m
*.host[*].mobility.initialZ = 0m

# 무선 매체(radioMedium)의 배경 잡음 세기를 -200dBm이라는 비현실적으로 낮은 값으로 설정합니다.
# 외부 요인으로 인한 전송 실패를 사실상 제거합니다.
*.radioMedium.backgroundNoise.power = -200dBm

# --- IEEE 802.11 MAC 계층 파라미터 조정 (충돌 관찰 목적) ---
# 이중 별표(**)는 경로 깊이에 상관없이 모든 하위 모듈에 이 설정을 적용하라는 의미입니다.
# RTS/CTS 핸드셰이크를 비활성화합니다. 패킷 크기가 이 값(999999B)보다 작으면 RTS/CTS를 사용하지 않습니다.
# 1000B 패킷을 사용하므로, 항상 비활성화되어 기본 CSMA/CA 방식(물리적 캐리어 감지)만 사용하게 됩니다.
**.wlan[0].mac.rtsThreshold = 999999B

# 백오프 카운터를 위한 경쟁 윈도우(CW)의 최솟값을 15로 설정합니다. (기본값 31)
# CW가 작아지면 노드들이 더 작은 난수 값을 선택하게 되어, 동시에 전송을 시도할 확률, 즉 충돌 확률이 높아집니다.
# 이는 충돌 및 백오프 메커니즘을 관찰하기 위한 의도적인 설정입니다.
**.wlan[0].mac.cwMin = 15
# 경쟁 윈도우의 최댓값은 표준값인 1023으로 유지합니다.
**.wlan[0].mac.cwMax = 1023

# --- 무선 신호 파라미터 조정 (전송 실패 방지 목적) ---
# 송신 전력을 100mW로 매우 강하게 설정합니다.
**.wlan[0].radio.transmitter.power = 100mW
# 수신 감도를 -120dBm으로 매우 민감하게 설정합니다. (값이 낮을수록 민감)
# 강한 송신+높은 감도+제로 거리+낮은 잡음 = 충돌 외의 다른 이유로 패킷 유실이 발생하지 않도록 보장합니다.
**.wlan[0].radio.receiver.sensitivity = -120dBm

# 신호의 복잡한 물리 현상(페이딩, 도플러 효과 등)을 모델링하지 않는 단순한 모델을 사용합니다.
**.wlan[0].radio.analogModel.typename = "ScalarAnalogModel"
# 경로 손실 모델은 FreeSpacePathLoss를 사용하지만, 모든 노드 간 거리가 0이므로 실제 감쇠는 없습니다.
**.wlan[0].radio.pathLoss.typename = "FreeSpacePathLoss"

# =================================================================================
# ----------------- 통계(결과) 기록 설정 -----------------
# =================================================================================

# (1) 전역 벡터 기록 활성화: 일단 모든 통계량을 시간의 흐름에 따라(.vec 파일) 기록합니다.
# 디버깅이나 초기 탐색에 유용하지만, 매우 큰 결과 파일을 생성할 수 있습니다.
**.vector-recording = true
# 분석이 끝나면 이 값을 false로 바꾸고 아래의 개별 설정을 활성화하는 것이 효율적입니다.

# (2) 특정 통계만 선택적으로 기록 (현재는 주석 처리됨)
# 아래는 CSMA/CA 분석에 유용한 주요 통계들의 예시입니다. 필요에 따라 주석을 해제하여 사용합니다.
# **.wlan[*].mac.contention.backoffPeriodGenerated:vector-recording = true  # 생성된 백오프 주기 값 기록
# **.wlan[*].mac.recoveryProcedure.contentionWindowChanged:vector-recording = true # 충돌 후 CW가 어떻게 변하는지 기록
# **.wlan[*].mac.recoveryProcedure.retryLimitReached:scalar-recording = true # 재시도 한계 초과로 폐기된 패킷 수 (스칼라: 최종 합계만 기록)

# =================================================================================
# ----------------- 실험 구성 (노드 수 변경) -----------------
# =================================================================================

# 'Base'라는 이름의 기본 설정을 정의합니다.
[Config Base]
# NED 파일에 정의된 numNodes 파라미터를 여기서 설정합니다. ${} 구문은 커맨드라인에서 값 변경을 쉽게 해줍니다.
# 예: -c Base --P **.n=15 --> 노드 15개로 실행
**.numHosts = ${n=10}

# 'N20'이라는 이름의 새 설정을 정의합니다.
[Config N20]
# 'Base' 설정의 모든 내용을 상속받습니다.
extends = Base
# 상속받은 설정 중 numHosts 값만 20으로 덮어씁니다.
**.numHosts = 20

# 'N50'이라는 이름의 새 설정을 정의합니다.
[Config N50]
# 역시 'Base' 설정을 상속받습니다.
extends = Base
# numHosts 값을 50으로 덮어씁니다.
**.numHosts = 50